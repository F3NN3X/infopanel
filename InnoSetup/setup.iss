; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "InfoPanel"
#define MyAppVersion GetFileVersion("..\InfoPanel\bin\publish\win-x64\InfoPanel.exe")
#define MyAppPublisher "Habib Rehman"
#define MyAppURL "https://infopanel.net"
#define MyAppExeName "InfoPanel.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
;SignTool=MsSign $f
AppId={{761BE813-4A06-4646-B930-3E647446A307}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppCopyright={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=no
DisableWelcomePage=no
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=InfoPanelSetup
SetupIconFile=..\InfoPanel\Resources\Images\favicon.ico
Compression=lzma2
SolidCompression=yes
WizardStyle=modern
CloseApplications=force
UninstallDisplayIcon={app}\InfoPanel.exe
UninstallDisplayName={#MyAppName}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "..\InfoPanel\bin\publish\win-x64\*"; Excludes: "*.pdb"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
procedure TaskKill(FileName: String);
var
  ResultCode: Integer;
begin
    Exec('{sys}\taskkill.exe', '/f /im ' + '"' + FileName + '"', '', SW_HIDE,
     ewWaitUntilTerminated, ResultCode);
end;

procedure DeletePluginFilesExceptIni(Path: String);
var
  FindRec: TFindRec;
  FilePath: String;
begin
  if FindFirst(Path + '\*', FindRec) then
  begin
    try
      repeat
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
        begin
          FilePath := Path + '\' + FindRec.Name;
          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY <> 0 then
          begin
            // Recursively process subdirectories
            DeletePluginFilesExceptIni(FilePath);
          end
          else
          begin
            // Delete file if it's not an .dll.ini file
            if CompareText(ExtractFileExt(FindRec.Name), '.dll.ini') <> 0 then
            begin
              DeleteFile(FilePath);
            end;
          end;
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
    end;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  PluginsPath: String;
begin
  if CurStep = ssInstall then
  begin
    // Clean up plugins folder before installation, preserving .ini files
    PluginsPath := ExpandConstant('{app}\plugins');
    if DirExists(PluginsPath) then
    begin
      DeletePluginFilesExceptIni(PluginsPath);
    end;
  end;
end;

[InstallDelete]
; Delete all files in root directory
Type: files; Name: "{app}\*.*"

; Delete specific directories completely
Type: filesandordirs; Name: "{app}\FFmpeg"
Type: filesandordirs; Name: "{app}\runtimes"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent runascurrentuser